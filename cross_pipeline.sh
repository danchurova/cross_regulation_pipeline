#/usr/bin/env bash

rm -r data/py_anno_files
mkdir data/py_anno_files || true

rm -r data/outputs
mkdir data/outputs || true

function find_cross_targets() {

	factor=$1 # SRSF7 or U2AF1 or all
	window=$2 # 500 {+-number of nucleotides} or what you consider appropriate
	eCLIP_threshold=$3 # 1 or 2
	q_val_threshold=$4 # typically 1.3


	# annotation
	### since i do not understand how to get casette exons from gencode_annotation, it would be an input_data
	python3 annotation.py -gff data/input_data/gencode.v19.annotation.gtf -o data/py_anno_files/genes.bed
	python3 annotation.py -gff data/input_data/gencode.v19.annotation.gtf -o data/py_anno_files/exon_gene.tsv | sort -u > data/py_anno_files/exon_gene.tsv
	python3 annotation.py -gff data/input_data/gencode.v19.annotation.gtf -o data/py_anno_files/stop_codons.bed | intersectBed -b stdin -a data/input_data/cassette_exons.bed -c > data/py_anno_files/stops.tsv
	echo annotation is done

	# RBPs KD shRNA to reactive exons
	# KD      cell    id      name    deltaPSI        deltaPSIc       z       p       q       KDFC
	# filter by q-value - consider delta PSI (5th and 6th colums)
	awk '$1!=$4' data/input_data/shRNA/B07/*.tsv | grep chr | awk '$9>$q_val_threshold' > data/outputs/reactive_exons.bed
	awk '$5>0' data/outputs/reactive_exons.bed > data/outputs/reactive_exons_incr.bed
	awk '$5<0' data/outputs/reactive_exons.bed > data/outputs/reactive_exons_decr.bed
	echo RBPs KD is analyzed

	# eCLIPs
	# making +-$window distances around exons and intersect with peaks
	# awk -v s=$window '{print $1,$3-s, $4+s, $2,1,$5,$6}' OFS='\t' data/py_anno_files/exon_gene.tsv | bedtools intersect -a stdin -b data/input_data/peaks_merged.bed -wa -wb -s > data/outputs/exon_peaks.bed
	# instead of using peaks_merged.bed file we start parsing raw_eCLIPs_all.bed (generated by zcat /home/dp/ngs/encodedcc/hg19/eCLIP/*.bed.gz | grep rep) with different thresholds for -log(p-value) and FDR(?) as 1/1 and 2/2
	awk -v OFS='\t' '{split($4,a,"_");if($7>1 && $8>1) print $1, $2, $3, a[1], $5, $6, a[2], a[3]}' data/input_data/raw_eCLIPs_all.bed | sort -u -k1,1 -k2,2n > data/outputs/significant_peaks.bed
	awk -v s=500 '{print $1,$3-s, $4+s, $2,1,$5,$6}' OFS='\t' data/py_anno_files/exon_gene.tsv | bedtools intersect -a stdin -b data/outputs/significant_peaks.bed  -wa -wb -s > data/outputs/exon_peaks.bed
	awk -v OFS='\t' '{if($7!=$11) print $8, $9, $10, $11, $12, $13, $1, $2, $3, $4, $5, $6, $7}' data/outputs/exon_peaks.bed > data/outputs/new_cross_peaks.bed
	python3 filter_cross_regulators.py data/outputs/new_cross_peaks.bed  data/outputs/reactive_exons.bed > data/outputs/filtered_new_cross_peaks.tsv
	python3 filter_by_nmd.py data/input_data/upf1xrn1_deltaPSI.tsv data/outputs/filtered_new_cross_peaks.tsv  > data/outputs/new_cross_peaks_nmd.tsv
	grep '^SRSF7' data/outputs/new_cross_peaks_nmd.tsv > data/outputs/new_SRSF7_peaks.tsv
	grep '^U2AF1' data/outputs/new_cross_peaks_nmd.tsv > data/outputs/new_U2AF1_peaks.tsv

	awk -v OFS='\t' '{split($4,a,"_");if($7>2 && $8>2) print $1, $2, $3, a[1], $5, $6, a[2], a[3]}' data/input_data/raw_eCLIPs_all.bed | sort -u -k1,1 -k2,2n > data/outputs/significant_peaks2.bed
	awk -v s=500 '{print $1,$3-s, $4+s, $2,1,$5,$6}' OFS='\t' data/py_anno_files/exon_gene.tsv | bedtools intersect -a stdin -b data/outputs/significant_peaks2.bed  -wa -wb -s > data/outputs/exon_peaks2.bed
	awk -v OFS='\t' '{if($7!=$11) print $8, $9, $10, $11, $12, $13, $1, $2, $3, $4, $5, $6, $7}' data/outputs/exon_peaks2.bed > data/outputs/new_cross_peaks2.bed
	python3 filter_cross_regulators.py data/outputs/new_cross_peaks2.bed  data/outputs/reactive_exons.bed > data/outputs/filtered_new_cross_peaks2.tsv
	python3 filter_by_nmd.py data/input_data/upf1xrn1_deltaPSI.tsv data/outputs/filtered_new_cross_peaks2.tsv  > data/outputs/new_cross_peaks_nmd2.tsv 
	grep '^SRSF7' data/outputs/new_cross_peaks_nmd2.tsv > data/outputs/new_SRSF7_peaks2.tsv
	grep '^U2AF1' data/outputs/new_cross_peaks_nmd2.tsv > data/outputs/new_U2AF1_peaks2.tsv
	if [ $1 = "SRSF7" ]; then
		# SRSF7 peaks alone
		grep SRSF7 data/outputs/significant_peaks.bed > data/outputs/SRSF7_significant_peaks.bed
		# making +-$window distances around exons and intersect with peaks
		awk -v s=$window '{print $1,$3-s, $4+s, $2,1,$5,$6}' OFS='\t' data/py_anno_files/exon_gene.tsv | bedtools intersect -a stdin -b data/outputs/SRSF7_significant_peaks.bed -wa -wb -s > data/outputs/SRSF7_exon_peaks.bed
		{all that should be done}
	fi
	# U2AF1 peaks alone
	if [ $1 = "U2AF1"]; then
		grep U2AF1 data/outputs/significant_peaks.bed > data/outputs/U2AF1_significant_peaks.bed
		{all that should be done}
	fi

	# distances between peak and exon? CHECK and change
	awk -v OFS="\t" '{if($7!=$11){d=(($9+$10)-($2+$3))/2;if(d<0){d=-d};print $4,$2,$3,$7,$11,d}}' data/outputs/exon_peaks.bed > data/outputs/exon_peaks_dist.tsv
	echo eCLIPs are intersected with exons

	# cross-peaks - intersection with genes
	# bedtools intersect -a data/input_data/peaks_merged.bed -b data/py_anno_files/genes.bed -wa -wb -s | awk '{split($4,a,"_");if(a[1]!=$17){print}}' | sort -k1,1 -k2,2n > data/outputs/cross_peaks.bed
	echo peaks are merged with genes


	# filtering peaks - only reactive exons
	python3 filter_cross_regulators.py data/outputs/cross_peaks.bed data/outputs/reactive_exons.bed > data/outputs/filtered_cross_peaks.tsv
	echo peaks are filtered by RBPs KD

	# only HepG2 and q-value > $q_val_threshold
	awk '$2=="HepG2"' data/outputs/filtered_cross_peaks.tsv | awk '$9>$q_val_threshold' > data/outputs/HepG2_significant_cross_peaks.tsv
	echo got significant peaks for HepG2

	# filter by NMD KD
	python3 filter_by_nmd.py data/input_data/upf1xrn1_deltaPSI.tsv data/outputs/HepG2_significant_cross_peaks.tsv > data/outputs/cross_peaks_nmd.tsv
	echo filtered by nmd


}

# find_cross_targets {factor} {window} {eCLIP_threshold} {q_val_threshold}

find_cross_targets SRSF7 500 1 1.3 > cross_peaks_nmd_SRSF7_500_1.tsv

